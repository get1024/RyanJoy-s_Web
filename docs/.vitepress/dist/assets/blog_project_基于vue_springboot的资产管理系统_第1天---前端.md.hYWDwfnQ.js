import{_ as t,c as n,I as a,aq as h,l as i,a as o,o as p,D as e}from"./chunks/framework.W9K_HP-H.js";const _=JSON.parse('{"title":"一、环境安装","description":"","frontmatter":{},"headers":[],"relativePath":"blog/project/基于vue+springboot的资产管理系统/第1天---前端.md","filePath":"blog/project/基于vue+springboot的资产管理系统/第1天---前端.md","lastUpdated":1714537645000}'),d={name:"blog/project/基于vue+springboot的资产管理系统/第1天---前端.md"},r=h(`<h1 id="一、环境安装" tabindex="-1">一、环境安装 <a class="header-anchor" href="#一、环境安装" aria-label="Permalink to &quot;一、环境安装&quot;">​</a></h1><h2 id="_1、nodejs-安装" tabindex="-1">1、nodejs 安装 <a class="header-anchor" href="#_1、nodejs-安装" aria-label="Permalink to &quot;1、nodejs 安装&quot;">​</a></h2><ul><li>官网：<a href="https://nodejs.org/en" target="_blank" rel="noreferrer">Node.js</a></li></ul><blockquote><p>可以选择14、16版本，我们以14版本为例。<code>npm</code> 会和 <code>nodejs</code> 一同安装。</p></blockquote><ol><li>安装完毕后，配置环境变量（系统变量 --&gt; path）。</li><li>验证是否配置成功：<code>node -v</code>![[Pasted image 20240310162933.png]]</li><li>镜像配置： <ol><li>查看镜像：<code>npm config get registry</code> ![[Pasted image 20240310163042.png]] 若结果与图片不符，则进行下一步。</li><li>配置镜像：<code>npm config set registry=https://registry.npmmirror.com/</code>。重新执行第一步，出现图像所示即为成功。</li></ol></li></ol><h2 id="_2、vue-cli-安装" tabindex="-1">2、vue-cli 安装 <a class="header-anchor" href="#_2、vue-cli-安装" aria-label="Permalink to &quot;2、vue-cli 安装&quot;">​</a></h2><ul><li>官网：<a href="https://cli.vuejs.org/zh/" target="_blank" rel="noreferrer">Vue CLI</a></li></ul><ol><li>安装命令：<code>npm install -g @vue/cli</code></li><li>验证是否安装成功：<code>vue -V</code> ![[Pasted image 20240310164554.png]]</li></ol><h3 id="_1vue-cli-是什么" tabindex="-1">①vue-cli 是什么？ <a class="header-anchor" href="#_1vue-cli-是什么" aria-label="Permalink to &quot;①vue-cli 是什么？&quot;">​</a></h3><ol><li>是一种基于 vue 的脚手架（比喻）；</li><li>可以保证代码兼容性；</li><li>将项目打包，删除冗杂的注释；</li><li>可以自动将项目混淆，降低已上线项目可读性（加密）。</li></ol><h3 id="_2vue-cli-和-vue-的区别" tabindex="-1">②vue-cli 和 vue 的区别？ <a class="header-anchor" href="#_2vue-cli-和-vue-的区别" aria-label="Permalink to &quot;②vue-cli 和 vue 的区别？&quot;">​</a></h3><ul><li>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noreferrer">Vue.js - 渐进式 JavaScript 框架 | Vue.js</a></li></ul><ol><li>Vue 是一个 js 框架；</li><li>Vue-cli 是对 vue 的封装，内置了很多插件。</li></ol><h2 id="_3、vscode-安装配置" tabindex="-1">3、vscode 安装配置 <a class="header-anchor" href="#_3、vscode-安装配置" aria-label="Permalink to &quot;3、vscode 安装配置&quot;">​</a></h2><ul><li>安装 vscode</li><li>安装 vue vscode snippets 插件，<code>vbase</code> 命令即可快速构建出 <code>vue</code> 项目结构</li></ul><hr><h1 id="二、参考项目" tabindex="-1">二、参考项目 <a class="header-anchor" href="#二、参考项目" aria-label="Permalink to &quot;二、参考项目&quot;">​</a></h1><h2 id="_1、vue-manager-system" tabindex="-1">1、vue-manager-system <a class="header-anchor" href="#_1、vue-manager-system" aria-label="Permalink to &quot;1、vue-manager-system&quot;">​</a></h2><p>地址：<a href="https://github.com/lin-xin/vue-manage-system" target="_blank" rel="noreferrer">Vue3、Element Plus、typescript后台管理系统</a></p><ol><li>下载项目；</li><li>解压，进入根目录，运行 <code>cmd</code>；</li><li>执行 <code>npm install</code> 下载<strong>依赖</strong>； <ol><li>生产依赖（dependencies）：开发、上线阶段都要使用； <ul><li>安装命令 <code>-S --save</code></li></ul></li><li>开发依赖（devDependencies）：只在开发阶段使用； <ul><li>安装命令 <code>-D --save -dev</code></li></ul></li></ol></li><li>启动项目：cmd 执行 <code>npm run dev</code></li></ol><hr><h1 id="三、创建项目" tabindex="-1">三、创建项目 <a class="header-anchor" href="#三、创建项目" aria-label="Permalink to &quot;三、创建项目&quot;">​</a></h1><h2 id="_1、命令行创建项目" tabindex="-1">1、命令行创建项目 <a class="header-anchor" href="#_1、命令行创建项目" aria-label="Permalink to &quot;1、命令行创建项目&quot;">​</a></h2><ul><li>命令： <code>vue create vue01</code></li></ul><ol><li>![[image-20240310102703631 1.png]]</li><li>![[image-20240310102748414.png]]</li><li>![[image-20240310102821536.png]]</li></ol><h2 id="_2、非-spa-项目" tabindex="-1">2、非 spa 项目 <a class="header-anchor" href="#_2、非-spa-项目" aria-label="Permalink to &quot;2、非 spa 项目&quot;">​</a></h2><ul><li>引入 <code>vue.js</code></li></ul><h3 id="_1vue-cli-项目目录结构" tabindex="-1">①Vue-cli 项目目录结构 <a class="header-anchor" href="#_1vue-cli-项目目录结构" aria-label="Permalink to &quot;①Vue-cli 项目目录结构&quot;">​</a></h3><p>![[image-20240310103303031.png]]</p><ol><li><code>node_modules</code> --&gt; 项目依赖包；</li><li><code>public</code> --&gt; 项目服务器</li></ol><hr><h1 id="四、vue-基本使用" tabindex="-1">四、vue 基本使用 <a class="header-anchor" href="#四、vue-基本使用" aria-label="Permalink to &quot;四、vue 基本使用&quot;">​</a></h1><h2 id="_1、双向绑定" tabindex="-1">1、双向绑定 <a class="header-anchor" href="#_1、双向绑定" aria-label="Permalink to &quot;1、双向绑定&quot;">​</a></h2><h3 id="_1数据驱动视图-pasted-image-20240311215737-png-pasted-image-20240311215750-png" tabindex="-1">①数据驱动视图 ![[Pasted image 20240311215737.png]] ![[Pasted image 20240311215750.png]] <a class="header-anchor" href="#_1数据驱动视图-pasted-image-20240311215737-png-pasted-image-20240311215750-png" aria-label="Permalink to &quot;①数据驱动视图 ![[Pasted image 20240311215737.png]] ![[Pasted image 20240311215750.png]]&quot;">​</a></h3><h3 id="_2视图驱动数据-pasted-image-20240311220342-png-pasted-image-20240311220351-png" tabindex="-1">②视图驱动数据 ![[Pasted image 20240311220342.png]] ![[Pasted image 20240311220351.png]] <a class="header-anchor" href="#_2视图驱动数据-pasted-image-20240311220342-png-pasted-image-20240311220351-png" aria-label="Permalink to &quot;②视图驱动数据 ![[Pasted image 20240311220342.png]] ![[Pasted image 20240311220351.png]]&quot;">​</a></h3><h3 id="_3双向绑定-pasted-image-20240311220539-png-pasted-image-20240311220613-png" tabindex="-1">③双向绑定 ![[Pasted image 20240311220539.png]] ![[Pasted image 20240311220613.png]] <a class="header-anchor" href="#_3双向绑定-pasted-image-20240311220539-png-pasted-image-20240311220613-png" aria-label="Permalink to &quot;③双向绑定 ![[Pasted image 20240311220539.png]] ![[Pasted image 20240311220613.png]]&quot;">​</a></h3><h2 id="_2、事件添加" tabindex="-1">2、事件添加 <a class="header-anchor" href="#_2、事件添加" aria-label="Permalink to &quot;2、事件添加&quot;">​</a></h2><ul><li>以登录按钮为例</li><li>按钮添加</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">onLogin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;登录&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>事件添加</li></ul><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	methods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">		onLogin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			[函数体]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>![[Pasted image 20240314101025.png]]![[Pasted image 20240314101105.png]]</p><h2 id="_3、class-样式控制" tabindex="-1">3、class 样式控制 <a class="header-anchor" href="#_3、class-样式控制" aria-label="Permalink to &quot;3、class 样式控制&quot;">​</a></h2><h3 id="_1template" tabindex="-1">①Template <a class="header-anchor" href="#_1template" aria-label="Permalink to &quot;①Template&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">操作样式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isActive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isActive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: isActive }</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;点击切换选中&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li>click 事件：每次点击 isActive 值取反；</li><li>class 中会接收当前的 isActive 值，赋给 active 选择器，从而选择是否执行 style 中的 <code>.active</code> 样式。</li></ul><h3 id="_2script" tabindex="-1">②Script <a class="header-anchor" href="#_2script" aria-label="Permalink to &quot;②Script&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	return{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		isActive:false,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>默认给 isActive 一个 false，即初始不显示 <code>.active</code> 的样式。</li></ul><h3 id="_3style" tabindex="-1">③Style <a class="header-anchor" href="#_3style" aria-label="Permalink to &quot;③Style&quot;">​</a></h3><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	.active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		[设置属性，用作激活</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">后的样式]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><ul><li><code>.active</code> 是样式选择器，用来控制 class 为 active 的控件的样式。</li></ul><h2 id="_4、组件-components-使用" tabindex="-1">4、组件（components）使用 <a class="header-anchor" href="#_4、组件-components-使用" aria-label="Permalink to &quot;4、组件（components）使用&quot;">​</a></h2><blockquote><p>vue 组件由 3 部分组成 <code>template</code>、<code>script</code>、<code>style</code></p><ol><li>Template 只能有一个根节点，且此组件必须存在</li><li>组件文件夹![[Pasted image 20240314125638.png]]</li></ol></blockquote><h3 id="_1组件使用步骤" tabindex="-1">①组件使用步骤 <a class="header-anchor" href="#_1组件使用步骤" aria-label="Permalink to &quot;①组件使用步骤&quot;">​</a></h3><ol><li>定义组件；![[Pasted image 20240314112638.png|600]]</li><li>导入组件（es 6 ：import）；![[Pasted image 20240314112902.png|600]]<strong>一定要放在 <code>&lt;script&gt;&lt;/script&gt;</code> 标签最前端</strong></li><li>注册组件；![[Pasted image 20240314112944.png|600]]</li><li>使用组件。![[Pasted image 20240314113016.png]]</li></ol><h2 id="_5、路由" tabindex="-1">5、路由 <a class="header-anchor" href="#_5、路由" aria-label="Permalink to &quot;5、路由&quot;">​</a></h2><h3 id="_1路由配置" tabindex="-1">①路由配置 <a class="header-anchor" href="#_1路由配置" aria-label="Permalink to &quot;①路由配置&quot;">​</a></h3><ul><li>首先导入路由 <ul><li>方法一：命令行创建项目时就把路由勾选上去；</li><li>方法二：手动安装 <code>npm install vue-router@3.5.1 --save </code></li></ul></li><li>配置文件![[Pasted image 20240314125516.png]]</li></ul><ol><li>懒加载：某页面<strong>不被访问</strong>时就<strong>不</strong>加载。</li><li>直接加载：首页一般都直接加载。 ![[Pasted image 20240314125808.png]]</li></ol><h3 id="_2跳转使用" tabindex="-1">②跳转使用 <a class="header-anchor" href="#_2跳转使用" aria-label="Permalink to &quot;②跳转使用&quot;">​</a></h3><ol><li>定义 <code>.vue</code> 文件作为一个页面组件 ![[Pasted image 20240314164048.png]]<strong>页面组件中，<code>&lt;div&gt;</code> 的 <code>&lt;class&gt;</code> 属性不需要与 <code>index.js</code> 和 <code>App.vue</code> 中的路径值相同</strong></li><li>路由配置文件 <code>index.js</code> 中进行对应配置 ![[Pasted image 20240314130255.png]] <code>path</code> 是必须注明的；<code>name</code> 不是必须的，但推荐写出，用来指明 <code>router</code> 的目的地。</li><li><code>App.vue</code> 中使用 <code>router-link</code> 进行跳转，<code>router-view</code> 使跳转显示 ![[Pasted image 20240314130447.png]] <code>to</code> 值需与 <code>index.js</code> 文件中的 <code>path</code> 值对应</li></ol><hr><h1 id="五、element-ui-框架" tabindex="-1">五、element-ui 框架 <a class="header-anchor" href="#五、element-ui-框架" aria-label="Permalink to &quot;五、element-ui 框架&quot;">​</a></h1><h2 id="_1、基本使用" tabindex="-1">1、基本使用 <a class="header-anchor" href="#_1、基本使用" aria-label="Permalink to &quot;1、基本使用&quot;">​</a></h2><ul><li>官网： <a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noreferrer">Element - The world&#39;s most popular Vue UI framework</a></li></ul><ol><li>安装：<code>npm i element-ui -S</code></li><li>导入：![[Pasted image 20240314134453.png]]</li><li>测试是否生效：![[Pasted image 20240314134627.png]]</li></ol><h2 id="_2、重要组件介绍" tabindex="-1">2、重要组件介绍 <a class="header-anchor" href="#_2、重要组件介绍" aria-label="Permalink to &quot;2、重要组件介绍&quot;">​</a></h2><h3 id="_1图标" tabindex="-1">①图标 <a class="header-anchor" href="#_1图标" aria-label="Permalink to &quot;①图标&quot;">​</a></h3><ul><li>矢量图标，放大不失真，可以自由设置颜色</li></ul><h3 id="_2下拉选择" tabindex="-1">②下拉选择 <a class="header-anchor" href="#_2下拉选择" aria-label="Permalink to &quot;②下拉选择&quot;">​</a></h3><ul><li>用户看到的，和实际背后进行的逻辑数据不一样</li><li>比如数据<strong>字典</strong>：![[Pasted image 20240314142025.png]]</li></ul><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>按钮</span></span>
<span class="line"><span>栅格布局</span></span>
<span class="line"><span>按钮</span></span>
<span class="line"><span>输入框</span></span>
<span class="line"><span>复选框</span></span>
<span class="line"><span>表格</span></span>
<span class="line"><span>分页</span></span>
<span class="line"><span>导航</span></span>
<span class="line"><span>tabbar</span></span>
<span class="line"><span>其它组件</span></span></code></pre></div><hr><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,75),c=i("h2",{id:"changelog",tabindex:"-1"},[o("Changelog "),i("a",{class:"header-anchor",href:"#changelog","aria-label":'Permalink to "Changelog"'},"​")],-1);function k(g,u,E,m,b,v){const s=e("NolebaseGitContributors"),l=e("NolebaseGitChangelog");return p(),n("div",null,[r,a(s),c,a(l)])}const q=t(d,[["render",k]]);export{_ as __pageData,q as default};
