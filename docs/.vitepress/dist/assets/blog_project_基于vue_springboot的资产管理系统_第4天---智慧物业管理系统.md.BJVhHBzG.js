import{_ as r,c as o,I as l,aq as u,l as i,a as n,o as s,D as a}from"./chunks/framework.B5CrngwD.js";const C=JSON.parse('{"title":"一、项目文档📄","description":"","frontmatter":{},"headers":[],"relativePath":"blog/project/基于vue+springboot的资产管理系统/第4天---智慧物业管理系统.md","filePath":"blog/project/基于vue+springboot的资产管理系统/第4天---智慧物业管理系统.md","lastUpdated":1714537645000}'),h={name:"blog/project/基于vue+springboot的资产管理系统/第4天---智慧物业管理系统.md"},c=u('<h1 id="一、项目文档📄" tabindex="-1">一、项目文档📄 <a class="header-anchor" href="#一、项目文档📄" aria-label="Permalink to &quot;一、项目文档📄&quot;">​</a></h1><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><blockquote><p>SpringBoot + Mybatis-plus + Redis + Spring Security + 若依</p></blockquote><ul><li>项目主体是基于若依进行项目构建： <ul><li>权限管理：用户管理、角色管理、菜单管理</li><li>部门管理、岗位管理</li><li>字典管理：可用使用现有的数据字典、也可用新增数据字典</li><li>参数管理：默认密码、验证码、</li><li>通知管理、日志管理</li><li>系统监控</li><li>动态菜单</li></ul></li><li>若依中已经集成了SpringSecurity实现了认证和授权 <ul><li>单表操作：单表的CRUD就使用若依代码生成功能，修改页面</li><li>多表操作：定义api接口，使用权限注解，编写Service/多表查询</li></ul></li><li>Redis做热点数据的缓存：动态菜单数据、部门数据、角色数据、验证码、sms短信服务（阿里云SMS） <ul><li>其实就是使用RedisCache来实现数据缓存</li></ul></li><li>若依中使用的是Mybatis，如果要用Mybatis-plus，只需要引入Mybatis-plus场景启动器即可 <ul><li>Mybatis-plus只做增强，不做改变</li></ul></li><li>基于SpringBoot构建的工程，我们使用的若依就是SpringBoot + Vue版本</li></ul><h2 id="项目介绍" tabindex="-1">项目介绍 <a class="header-anchor" href="#项目介绍" aria-label="Permalink to &quot;项目介绍&quot;">​</a></h2><ul><li>官网：<a href="http://pms.zhaoxinms.com/" target="_blank" rel="noreferrer">肇新智慧物业</a></li><li>使用文档：<a href="http://zhaoxinms.com:81/#/" target="_blank" rel="noreferrer">Document</a> （太旧）</li><li>三端： <ul><li>社区APP/小程序：业主</li><li>物管APP/小程序：物业工作人员-&gt;管家、维修人员</li><li>PC管理系统：管理员、收费人员...</li></ul></li><li>若依已实现功能：系统管理、团队管理</li><li>资产管理： <ul><li>商业区管理：单表的CRUD</li><li>楼栋管理：单表的CRUD，但是新增、修改、查询需要关联商业区数据</li><li>商铺管理：单表的CRUD，但是新增、修改、查询关联楼栋数据 <ul><li>级联选择器：<a href="https://element.eleme.cn/#/zh-CN/component/cascader#cascader-ji-lian-xuan-ze-qi" target="_blank" rel="noreferrer">Cascader 级联选择器</a></li><li>数据导入：<a href="https://doc.ruoyi.vip/ruoyi-vue/document/htsc.html#%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA" target="_blank" rel="noreferrer">导入导出</a></li><li>租赁统计：只是数据的查询，但是在前端需要进行特殊的处理 <ul><li>数据查询：order排序，根据楼层和房间号从小到大排序</li></ul></li><li>关系：商业区 &gt; 楼栋 &gt; 商品</li></ul></li></ul></li><li>租售管理： <ul><li>业主管理：单表的CRUD、没有删除，但是有明细功能、关联查询</li><li>租售合同管理： <ul><li>没有新增，租售和商铺挂钩，在商铺管理里面添加的数据，都可用作租售； <ul><li>商铺编号、使用状态和商铺数据挂钩</li><li>公司名、姓名、电话和业主数据挂钩</li></ul></li><li>发起合同： <ul><li>步骤条： <a href="https://element.eleme.cn/#/zh-CN/component/steps" target="_blank" rel="noreferrer">Steps 步骤条</a></li><li>1、选择租售类型、开始时间</li><li>2、选择业主、从事行业</li><li>3、设置收费项(关联默认收费项，只能关联常规收费项)</li></ul></li><li>撤销合同</li></ul></li></ul></li><li>收费管理： <ul><li>收费项管理：单表的CRUD <ul><li>物业可用设置收费项</li><li>系统自带的收费项只有物业管理费，后续可用新增： <ul><li>车位管理费、装修押金、建筑垃圾清理费（针对于业主）</li><li>广告费、投放费（不是针对于业主）</li></ul></li></ul></li><li>收费数据生成 <ul><li>生成数据(非抄表)：费用生效日期、收费项目、收费限期 <ul><li>收费项目：只要商铺关联了该收费项目，都会生成收费数据</li></ul></li></ul></li><li>综合收银：常规收费、临时收费、收取押金 【针对于商铺】 <ul><li>1、输入商铺编号，点击查询 <ul><li>layout实现布局：<a href="https://element.eleme.cn/#/zh-CN/component/layout" target="_blank" rel="noreferrer">Layout 布局</a></li></ul></li><li>2、选择收费项，点击收费 <ul><li>选择付款方式、使用预付款</li></ul></li><li>3、查询历史信息</li></ul></li><li>预存款管理 <ul><li>预存：新增</li><li>退还：修改</li></ul></li><li>非商铺：临时收费、押金管理</li></ul></li><li>收费项类型是固定的，但是只有查询，没有增删改；</li></ul><h1 id="二、技术体系" tabindex="-1">二、技术体系 <a class="header-anchor" href="#二、技术体系" aria-label="Permalink to &quot;二、技术体系&quot;">​</a></h1><h2 id="java-基础阶段课程体系涉及的知识点" tabindex="-1">Java 基础阶段课程体系涉及的知识点： <a class="header-anchor" href="#java-基础阶段课程体系涉及的知识点" aria-label="Permalink to &quot;Java 基础阶段课程体系涉及的知识点：&quot;">​</a></h2><ul><li>基础语法：变量、数据类型、运算符、流程控制、数组</li><li>面向对象：封装、继承、多态、内部类、常用关键字...</li><li>异常处理：try-catch-finally、throw 和 throws、自定义异常...</li><li>常用类：String、StringBuffer、SttringBuilder、Date、日期格式化、系统类、包装类...</li><li>枚举类、注解、泛型：泛型类、泛型接口、泛型方法</li><li>集合框架：Collection、List、Set、Map... <ul><li>List：ArrayList、LinkedList、Vector</li><li>Set：HashSet、TreeSet、LinkedHashSet</li><li>Map：HashMap、TreeMap、LinkedHashMap</li></ul></li><li>多线程：同步和异步、创建线程的四种方式、常见的 API、线程同步和通信、线程池</li><li>IO 流：文件流、缓冲流、转换流、对象流（序列化）、</li><li>反射：理解反射、反射常用 API</li><li>JDK 8 新特性：Lambda 表达式、流 Stream、新的日期 API...</li><li>基础的知识在开发中，肯定是用到的</li><li>面试核心： <ul><li>面向对象</li><li>集合框架（接口和接口的关系、底层数据结构、扩容机制、实现原理）</li><li>多线程</li><li>反射</li><li>如果是校招，那么肯定会涉及到数据结构和算法</li></ul></li><li>框架 = 反射 + 注解 + 设计模式</li></ul><h2 id="javaweb-阶段" tabindex="-1">JavaWeb 阶段 <a class="header-anchor" href="#javaweb-阶段" aria-label="Permalink to &quot;JavaWeb 阶段&quot;">​</a></h2><ul><li>前端技术： <ul><li>HTML 5：一系列标签</li><li>CSS 3：一系列的样式，媒体查询、flex 布局</li><li>JS：基础语法、BOM、DOM</li><li>Vue：主流前端框架</li></ul></li><li>后端技术： <ul><li>MySQL 数据库、JDBC</li><li>Tomcat</li><li>Servlet</li><li>Cookie 和 Session</li><li>监听器过滤器</li><li>Ajax 和 JSON</li><li>Git</li></ul></li><li>面试核心： <ul><li>MySQL 数据库：SQL 语句、索引</li><li>Git：Git 常用命令（分支、版本回退）</li></ul></li></ul><h2 id="java-核心框架阶段" tabindex="-1">Java 核心框架阶段 <a class="header-anchor" href="#java-核心框架阶段" aria-label="Permalink to &quot;Java 核心框架阶段&quot;">​</a></h2><ul><li>微信小程序：原生微信小程序</li><li>Maven：Maven 坐标、依赖传递、生命周期、项目拆分和聚合</li><li>三大核心框架 SSM <ul><li>Spring</li><li>SpringMVC</li><li>Mybatis</li></ul></li><li>面试核心： <ul><li>Spring： <ul><li>Spring 的 IOC 和 AOP</li><li>Spring Bean 的生命周期</li><li>源码</li></ul></li><li>Mybatis</li></ul></li><li>开发核心： <ul><li>目前 Java 开发都是基于 Maven</li></ul></li></ul><h2 id="java-企业级应用" tabindex="-1">Java 企业级应用 <a class="header-anchor" href="#java-企业级应用" aria-label="Permalink to &quot;Java 企业级应用&quot;">​</a></h2><ul><li>SpringBoot：简化 Spring 项目的初始化搭建和简化开发周期</li><li>Mybatis-plus：Mybatis 的增强版，快速生成单表的 CRUD</li><li>Nginx：静态资源服务器、反向代理和负载均衡</li><li>项目上云：阿里云 ECS 服务器、OSS、阿里云数据库、域名...</li><li>Linux 操作系统</li><li>Docker：容器化部署</li><li>Redis：数据缓存</li><li>Spring Security：安全管理框架，认证和授权</li><li>若依：低代码开发平台</li><li>面试核心： <ul><li>SpringBoot 自动装配的原理</li><li>Redis</li></ul></li><li>开发核心： <ul><li>SpringBoot、Mybatis-plus、Redis、Spring Security</li></ul></li><li>运维核心： <ul><li>云平台、Linux、Docker</li></ul></li></ul><h2 id="java-微服务" tabindex="-1">Java 微服务 <a class="header-anchor" href="#java-微服务" aria-label="Permalink to &quot;Java 微服务&quot;">​</a></h2><ul><li>Uniapp：跨端应用开发</li><li>RabbitMQ：消息队列，异步处理的一种方式 <ul><li>异步提速、应用解耦、削峰填谷、延迟队列、死信队列...</li></ul></li><li>ElasticSearch：全文检索、核心特性倒排索引...</li><li>Spring Cloud：微服务解决方案</li><li>面试核心： <ul><li>MQ 消息队列</li><li>ElasticSearch：全文检索</li></ul></li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>',18),d=i("h2",{id:"file-history",tabindex:"-1"},[n("File History "),i("a",{class:"header-anchor",href:"#file-history","aria-label":'Permalink to "File History"'},"​")],-1);function p(b,S,_,m,g,f){const e=a("NolebaseGitContributors"),t=a("NolebaseGitChangelog");return s(),o("div",null,[c,l(e),d,l(t)])}const y=r(h,[["render",p]]);export{C as __pageData,y as default};
