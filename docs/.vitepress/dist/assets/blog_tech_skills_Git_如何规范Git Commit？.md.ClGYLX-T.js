import{_ as o,c as l,I as i,aq as c,l as e,a as r,o as n,D as t}from"./chunks/framework.B5CrngwD.js";const y=JSON.parse('{"title":"如何规范Git Commit？","description":"","frontmatter":{"Created at":"2024年05月02日 11:14:24","Last edited at":"2024年05月02日 12:00:17","title":"如何规范Git Commit？"},"headers":[],"relativePath":"blog/tech_skills/Git/如何规范Git Commit？.md","filePath":"blog/tech_skills/Git/如何规范Git Commit？.md","lastUpdated":1714622661000}'),h={name:"blog/tech_skills/Git/如何规范Git Commit？.md"},d=c(`<h1 id="如何规范git-commit" tabindex="-1">如何规范Git Commit？ <a class="header-anchor" href="#如何规范git-commit" aria-label="Permalink to &quot;如何规范Git Commit？&quot;">​</a></h1><div class="warning custom-block github-alert"><p class="custom-block-title">我们为什么要规范 commit？</p><p>多人协作项目、个人版本控制在进行 Git 提交时，都需要写 commit message，否则 <code>git push origin main</code> 是不被允许的。 一般来说，commit message应该清晰明了，说明本次提交的目的，具体做了什么操作…… 但是在日常开发中，大家的commit message千奇百怪，中英文混合使用、fix bug等各种笼统的message司空见怪，这就导致后续代码维护成本特别大，有时自己都不知道自己的fix bug修改的是什么问题。 基于以上这些问题，本文希望通过某种方式来监控用户的git commit message，让规范更好的服务于质量，提高大家的研发效率。</p></div><h2 id="规范建设" tabindex="-1">规范建设 <a class="header-anchor" href="#规范建设" aria-label="Permalink to &quot;规范建设&quot;">​</a></h2><p>一开始，我希望借助前人已经约定好的规范进行本文的内容基础，但在寻找了大量关于 <code>git commit -m [message]</code> 的资料后，学习、结合了 <a href="https://github.com/alibaba" target="_blank" rel="noreferrer">Alibaba · 阿里巴巴</a>、<a href="https://lbs.amap.com/" target="_blank" rel="noreferrer">高德地图</a>等相关部门已有的规范总结出以下规范。</p><h3 id="commit-message格式" tabindex="-1">Commit message格式 <a class="header-anchor" href="#commit-message格式" aria-label="Permalink to &quot;Commit message格式&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">scope</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><h2 id="字段含义" tabindex="-1">字段含义 <a class="header-anchor" href="#字段含义" aria-label="Permalink to &quot;字段含义&quot;">​</a></h2><h3 id="type" tabindex="-1">type <a class="header-anchor" href="#type" aria-label="Permalink to &quot;type&quot;">​</a></h3><div class="important custom-block github-alert"><p class="custom-block-title">必写项</p><p>type 是 commit message 必须包含的内容，用于说明git commit的类别，只允许使用下面的标识。</p></div><ul><li><code>feat</code>：新功能（feature）。</li><li><code>fix/to</code>：修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。 <ul><li><code>fix</code>：产生diff并自动修复此问题。适合于一次提交直接修复问题</li><li><code>to</code>：只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix</li></ul></li><li><code>docs</code>：文档（documentation）。</li><li><code>style</code>：格式（不影响代码运行的变动）。</li><li><code>refactor</code>：重构（即不是新增功能，也不是修改bug的代码变动）。</li><li><code>perf</code>：优化相关，比如提升性能、体验。</li><li><code>test</code>：增加测试。</li><li><code>chore</code>：构建过程或辅助工具的变动。</li><li><code>revert</code>：回滚到上一个版本。</li><li><code>merge</code>：代码合并。</li><li><code>sync</code>：同步主线或分支的Bug。</li></ul><h3 id="scope" tabindex="-1">scope <a class="header-anchor" href="#scope" aria-label="Permalink to &quot;scope&quot;">​</a></h3><div class="tip custom-block github-alert"><p class="custom-block-title">可选项</p><p>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p></div><ul><li>例如在Angular，可以是location，browser，compile，compile，rootScope， ngHref，ngClick，ngView等。如果你的修改影响了不止一个scope，你可以使用 <code>*</code> 号代替。</li></ul><h3 id="subject" tabindex="-1">subject <a class="header-anchor" href="#subject" aria-label="Permalink to &quot;subject&quot;">​</a></h3><div class="tip custom-block github-alert"><p class="custom-block-title">可选项</p><p>subject是commit目的的简短描述，不超过50个字符。</p></div><ul><li>建议使用中文（感觉中国人用中文描述问题能更清楚一些）。</li><li>结尾不加句号或其他标点符号。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>根据以上规范git commit message将是如下的格式：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fix(DAO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):用户查询缺少username属性 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">feat(Controller</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):用户查询接口开发</span></span></code></pre></div><p>以上就是本文梳理的git commit规范，那么我们这样规范git commit到底有哪些好处呢？</p><ul><li>便于程序员对提交历史进行追溯，了解发生了什么情况。</li><li>一旦约束了commit message，意味着我们将慎重的进行每一次提交，不能再一股脑的把各种各样的改动都放在一个git commit里面，这样一来整个代码改动的历史也将更加清晰。</li><li>格式化的commit message才可以用于自动化输出Change log。</li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;Contributors&quot;">​</a></h2>`,22),m=e("h2",{id:"changelog",tabindex:"-1"},[r("Changelog "),e("a",{class:"header-anchor",href:"#changelog","aria-label":'Permalink to "Changelog"'},"​")],-1);function p(g,u,k,b,_,f){const a=t("NolebaseGitContributors"),s=t("NolebaseGitChangelog");return n(),l("div",null,[d,i(a),m,i(s)])}const E=o(h,[["render",p]]);export{y as __pageData,E as default};
