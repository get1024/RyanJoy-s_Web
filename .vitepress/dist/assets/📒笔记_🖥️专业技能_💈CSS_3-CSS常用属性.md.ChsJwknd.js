import{_ as d,o,c as r,j as a,a as p,G as t,a3 as c,B as i}from"./chunks/framework.BywWcDIw.js";const h="/RyanJoy-s_Web/assets/pixel.D2d4hLeG.png",g="/RyanJoy-s_Web/assets/color_hue.D6LBLuu9.png",f=JSON.parse('{"title":"CSS 常用属性","description":"","frontmatter":{"title":"CSS 常用属性","createAt":"2025-01-24T17:34:36.000Z","updateAt":"2025-01-24T22:10:56.000Z"},"headers":[],"relativePath":"📒笔记/🖥️专业技能/💈CSS/3-CSS常用属性.md","filePath":"📒笔记/🖥️专业技能/💈CSS/3-CSS常用属性.md","lastUpdated":1737728372000}'),b={name:"📒笔记/🖥️专业技能/💈CSS/3-CSS常用属性.md"};function k(u,s,m,E,y,v){const l=i("ArticleMetadata"),e=i("NolebaseGitContributors"),n=i("NolebaseGitChangelog");return o(),r("div",{"data-pagefind-body":!0,"data-pagefind-meta":"base64:JTdCJTIydGl0bGUlMjIlM0ElMjJDU1MlMjAlRTUlQjglQjglRTclOTQlQTglRTUlQjElOUUlRTYlODAlQTclMjIlMkMlMjJjcmVhdGVBdCUyMiUzQSUyMjIwMjUtMDEtMjRUMTclM0EzNCUzQTM2LjAwMFolMjIlMkMlMjJ1cGRhdGVBdCUyMiUzQSUyMjIwMjUtMDEtMjRUMjIlM0ExMCUzQTU2LjAwMFolMjIlMkMlMjJkYXRlJTIyJTNBMTczNzcyODM3MjAwMCU3RA=="},[s[0]||(s[0]=a("h1",{id:"css-常用属性",tabindex:"-1"},[p("CSS 常用属性 "),a("a",{class:"header-anchor",href:"#css-常用属性","aria-label":'Permalink to "CSS 常用属性"'},"​")],-1)),t(l),s[1]||(s[1]=c('<h2 id="像素的概念" tabindex="-1">像素的概念 <a class="header-anchor" href="#像素的概念" aria-label="Permalink to &quot;像素的概念&quot;">​</a></h2><ul><li>概念：我们的电脑屏幕是，由一个一个“小点”组成的，每个“小点”，就是一个像素（px）。</li><li>规律：像素点越小，呈现的内容就越清晰、越细腻。</li></ul><p><img src="'+h+`" alt="" loading="lazy"></p><p><span class="marker-underline">注意点：如果电脑设置中开启了<strong>缩放</strong>，那么就会影响一些工具的测量结果，但这无所谓，因为我们工作中都是参考详细的设计稿，去给元素设置宽高。</span></p><h2 id="颜色的表示" tabindex="-1">颜色的表示 <a class="header-anchor" href="#颜色的表示" aria-label="Permalink to &quot;颜色的表示&quot;">​</a></h2><h3 id="表示方式一-颜色名" tabindex="-1">表示方式一：颜色名 <a class="header-anchor" href="#表示方式一-颜色名" aria-label="Permalink to &quot;表示方式一：颜色名&quot;">​</a></h3><ul><li>编写方式：直接使用颜色对应的英文单词，编写比较简单，例如：</li></ul><ol><li style="color:red;"><strong>红色</strong>: red</li><li style="color:green;"><strong>绿色</strong>: green</li><li style="color:blue;"><strong>蓝色</strong>: blue</li><li style="color:purple;"><strong>紫色</strong>: purple</li><li style="color:orange;"><strong>橙色</strong>: orange</li><li style="color:gray;"><strong>灰色</strong>: gray</li><li>……</li></ol><ul><li>颜色名这种方式，表达的颜色比较单一，所以用的并不多。</li></ul><h3 id="表示方式二-rgb-或-rgba" tabindex="-1">表示方式二：rgb 或 rgba <a class="header-anchor" href="#表示方式二-rgb-或-rgba" aria-label="Permalink to &quot;表示方式二：rgb 或 rgba&quot;">​</a></h3><ul><li>编写方式：使用 <strong>红</strong>、<strong>黄</strong>、<strong>蓝</strong> 这三种光的三原色进行组合。 <ul><li>r 表示 <strong>红色</strong></li><li>g 表示 <strong>绿色</strong></li><li>b 表示 <strong>蓝色</strong></li><li>a 表示 <strong>透明度</strong></li></ul></li><li>举例：</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 使用 0~255 之间的数字表示一种颜色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(255, 0, 0); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 红色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(0, 255, 0); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 绿色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(0, 0, 255); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 蓝色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(0, 0, 0); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 黑色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(255, 255, 255); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 白色 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 混合出任意一种颜色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(138, 43, 226); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 紫罗兰色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgba(255, 0, 0, 0</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 半透明的红色 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 也可以使用百分比表示一种颜色（用的少） */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgb(100%, 0%, 0%); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 红色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: rgba(100%, 0%, 0%, 50%); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 半透明的红色 */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></div><ul><li>小规律： <ol><li>若三种颜色值相同，呈现的是灰色，值越大，灰色越浅。</li><li><code>rgb(0, 0, 0)</code> 是黑色， <code>rgb(255, 255, 255)</code> 是白色。</li><li>对于 <code>rbga</code> 来说，前三级的 <code>rgb</code> 形式要保持一致，要么都是 <code>0~255</code> 的数字，要么都是 <code>百分比</code> 。</li></ol></li></ul><h3 id="表示方式三-hex-或-hexa" tabindex="-1">表示方式三：HEX 或 HEXA <a class="header-anchor" href="#表示方式三-hex-或-hexa" aria-label="Permalink to &quot;表示方式三：HEX 或 HEXA&quot;">​</a></h3><p><code>HEX</code> 的原理同与 <code>rgb</code> 一样，依然是通过：<code>红</code>、<code>绿</code>、<code>蓝</code> 进行组合，只不过要用 <code>6位（分成3组）</code> 来表达，格式为：<code>#rrggbb</code></p><p>每一位数字的取值范围是：<code>0 ~ f</code>，即：（<code>0, 1, 2, 3, 4, 5, 6, 7, 8, 9, a, b, c, d, e, f</code>）</p><p>所以每一种光的最小值是：<code>00</code>，最大值是：<code>ff</code></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#ff0000;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 红色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#00ff00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 绿色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#0000ff</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 蓝色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 黑色 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#ffffff;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 白色 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 如果每种颜色的两位都是相同的，就可以简写 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: \`</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#ff9988\`;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 可简为: \`#f98\` */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 但要注意前三位简写了，那么透明度就也要简写 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">color: \`</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">#ff998866\`;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* 可简为: \`#f986\` */</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></div><p><span class="marker-highlight">注意点：IE 浏览器不支持 HEXA，但支持 HEX。</span></p><h3 id="表示方式四-hsl-或-hsla" tabindex="-1">表示方式四：HSL 或 HSLA <a class="header-anchor" href="#表示方式四-hsl-或-hsla" aria-label="Permalink to &quot;表示方式四：HSL 或 HSLA&quot;">​</a></h3><ul><li><p><code>HSL</code> 是通过：色相、饱和度、亮度，来表示一个颜色的，格式为：<code>hsl(色相, 饱和度, 亮度)</code></p></li><li><p>色相：取值范围是 <code>0~360</code> 度，具体度数对应的颜色如下图：</p><p><img src="`+g+'" alt="" loading="lazy"></p></li><li><p>饱和度：取值范围是 <code>0%~100%</code>。（向色相中对应颜色中添加灰色，<code>0%</code> 全灰，<code>100%</code> 没有灰）</p></li><li><p>亮度：取值范围是 <code>0%~100%</code>。（<code>0%</code> 亮度没了，所以就是黑色。<code>100%</code> 亮度太强，所以就是白色了）</p></li><li><p><code>HSLA</code> 其实就是在 <code>HSL</code> 的基础上，添加了透明度。</p></li></ul><h2 id="css-字体属性" tabindex="-1">CSS 字体属性 <a class="header-anchor" href="#css-字体属性" aria-label="Permalink to &quot;CSS 字体属性&quot;">​</a></h2><h3 id="字体大小" tabindex="-1">字体大小 <a class="header-anchor" href="#字体大小" aria-label="Permalink to &quot;字体大小&quot;">​</a></h3><ul><li>属性名：<code>font-size</code></li><li>作用：控制字体的大小。</li><li>语法：</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><ul><li><p>注意点</p><ol><li><code>Chrome</code> 浏览器支持的最小文字为 <code>12px</code> ，默认的文字大小为 <code>16px</code> ，并且 <code>0px</code> 会自动消失。</li><li>不同浏览器默认的字体大小可能不一致，所以最好给一个明确的值，不要用默认大小。</li><li>通常以给 <code>body</code> 设置 <code>font-size</code> 属性，这样 <code>body</code> 中的其他元素就都可以继承了。</li></ol></li><li><p>借助控制台看样式</p></li></ul><p><img src="" alt="控制台" loading="lazy"></p><h3 id="字体族" tabindex="-1">字体族 <a class="header-anchor" href="#字体族" aria-label="Permalink to &quot;字体族&quot;">​</a></h3><ul><li><p><strong>属性名：</strong> <code>font-family</code></p></li><li><p><strong>作用：</strong> 控制字体类型。</p></li><li><p><strong>语法：</strong></p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-family</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;STCaiyun&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Microsoft YaHei&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sans-serif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div></li><li><p><strong>注意：</strong></p><ol><li>使用字体的英文名字兼容性会更好，具体的英文名可以自行查询，或在电脑的设置里去寻找。</li><li>如果字体名包含空格，必须使用引号包裹起来。</li><li>可以设置多个字体，按照从左到右的顺序逐个查找，找到就用，没有找到就使用后面的，且通常在最后写上 <strong>serif</strong>（衬线字体）或 <strong>sans-serif</strong>（非衬线字体）。</li><li><strong>windows</strong> 系统中，默认的字体就是微软雅黑。</li></ol></li></ul><h3 id="字体风格" tabindex="-1">字体风格 <a class="header-anchor" href="#字体风格" aria-label="Permalink to &quot;字体风格&quot;">​</a></h3><ul><li><p><strong>属性名：</strong> <code>font-style</code></p></li><li><p><strong>作用：</strong> 控制字体是否为斜体。</p></li><li><p><strong>常用值：</strong></p><ol><li><code>normal</code>：正常（默认值）</li><li><code>italic</code>：斜体（使用字体自带的斜体效果）</li><li><code>oblique</code>：斜体（强制倾斜产生的斜体效果）</li></ol><p>实现斜体时，更推荐使用 <strong>italic</strong>。</p></li></ul><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;hr&gt;&lt;hr&gt;</span></span>\n<span class="line"><span>- 语法：</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>  ```css [exapmle.css]</span></span>\n<span class="line"><span>  div {</span></span>\n<span class="line"><span>    font-style: italic;</span></span>\n<span class="line"><span>  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="字体粗细" tabindex="-1">字体粗细 <a class="header-anchor" href="#字体粗细" aria-label="Permalink to &quot;字体粗细&quot;">​</a></h3><ul><li><p>属性名：<code>font-weight</code></p></li><li><p>作用：控制字体的粗细。</p></li><li><p>常用值：</p><ul><li><p>关键词</p><ol><li>lighter：细</li><li>normal：正常</li><li>bold：粗</li><li>bolder：很粗（多数字体不支持）</li></ol></li><li><p>数值：</p><ol><li>100~1000 且无单位，数值越大，字体越粗（或一样粗，具体得看字体设计时的精确程度）。</li><li>100~300 等同于 lighter，400~500 等同于 normal，600 及以上等同于 bold。</li></ol></li></ul></li><li><p>语法：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></div></li></ul><h3 id="字体复合写法" tabindex="-1">字体复合写法 <a class="header-anchor" href="#字体复合写法" aria-label="Permalink to &quot;字体复合写法&quot;">​</a></h3><ul><li><p>属性名：<code>font</code>，可以把上述字体样式合并成一个属性。</p></li><li><p>作用：将上述所有字体相关的属性复合在一起编写。</p></li><li><p>编写规则：</p><ol><li>字体大小、字体族必须都写上。</li><li>字体族必须是最后一位，字体大小必须是倒数第二位。</li><li>各个属性间用空格隔开。</li></ol></li><li><p>实际开发中更推荐复合写法，但这也不是绝对的，比如只想设置字体大小，那就直接用 <code>font-size</code> 属性。</p></li></ul><h2 id="css文本属性" tabindex="-1">CSS文本属性 <a class="header-anchor" href="#css文本属性" aria-label="Permalink to &quot;CSS文本属性&quot;">​</a></h2><h3 id="文本颜色" tabindex="-1">文本颜色 <a class="header-anchor" href="#文本颜色" aria-label="Permalink to &quot;文本颜色&quot;">​</a></h3><ul><li>属性名：<code>color</code></li><li>作用：控制文字的颜色。</li><li>可选值： <ol><li>颜色名</li><li><code>rgb</code> 或 <code>rgba</code></li><li><code>HEX</code> 或 <code>HEXA</code> （十六进制）</li><li><code>HSL</code> 或 <code>HSLA</code></li></ol></li></ul><blockquote><p>开发中常用的是：<code>rgb/rgba</code> 或 <code>HEX/HEXA</code> （十六进制）。</p></blockquote><ul><li>举例：</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">112</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">78</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><h3 id="_4-2-文本间距" tabindex="-1">4.2 文本间距 <a class="header-anchor" href="#_4-2-文本间距" aria-label="Permalink to &quot;4.2 文本间距&quot;">​</a></h3><ul><li><p>字母间距：<code>letter-spacing</code></p></li><li><p>单词间距：<code>word-spacing</code>（通过空格识别词）</p></li><li><p>属性值为像素（<code>px</code>），正值让间距增大，负值让间距缩小。</p></li></ul><h3 id="_4-3-文本修饰" tabindex="-1">4.3 文本修饰 <a class="header-anchor" href="#_4-3-文本修饰" aria-label="Permalink to &quot;4.3 文本修饰&quot;">​</a></h3><ul><li>属性名：<code>text-decoration</code></li><li>作用：控制文本的各种装饰线。</li><li>可选值： <ol><li><code>none</code>：无装饰线（常用）</li><li><code>underline</code>：下划线（常用）</li><li><code>overline</code>：上划线</li><li><code>line-through</code>：删除线</li></ol></li></ul><p>可搭配如下值使用：</p><ol><li><code>dotted</code>：虚线</li><li><code>wavy</code>：波浪线</li><li>也可以指定颜色</li></ol><ul><li>举例：</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-decoration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div><hr><hr><h3 id="_4-4-文本缩进" tabindex="-1">4.4 文本缩进 <a class="header-anchor" href="#_4-4-文本缩进" aria-label="Permalink to &quot;4.4 文本缩进&quot;">​</a></h3><ul><li><p>属性名：<code>text-indent</code>。</p></li><li><p>作用：控制文本首字母的缩进。</p></li><li><p>属性值：<code>css</code> 中的长度单位，例如：<code>px</code></p></li><li><p>举例：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-indent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div></li></ul><p>后面我们会学习 <code>css</code> 中一些新的长度单位，目前我们只知道像素（<code>px</code>）。</p><h3 id="_4-5-文本对齐-水平" tabindex="-1">4.5 文本对齐_水平 <a class="header-anchor" href="#_4-5-文本对齐-水平" aria-label="Permalink to &quot;4.5 文本对齐_水平&quot;">​</a></h3><ul><li><p>属性名：<code>text-align</code>。</p></li><li><p>作用：控制文本的水平对齐方式。</p></li><li><p>常用值：</p><ol><li><code>left</code>：左对齐（默认值）</li><li><code>right</code>：右对齐</li><li><code>center</code>：居中对齐</li></ol></li><li><p>举例：</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></div></li></ul><h3 id="_4-6-细说-font-size" tabindex="-1">4.6 细说 font-size <a class="header-anchor" href="#_4-6-细说-font-size" aria-label="Permalink to &quot;4.6 细说 font-size&quot;">​</a></h3><ol><li><p>由于字体设计原因，文字最终呈现的大小，并不一定与 <code>font-size</code> 的值一致，可能大，也可能小。</p><p>例如：<code>font-size</code> 设为 <code>40px</code>，最终呈现的文字，可能比 <code>40px</code> 大，也可能比 <code>40px</code> 小。</p></li><li><p>通常情况下，文字相对字体设计框，并不是垂直居中的，通常都靠下一些。</p></li></ol><h3 id="_4-7-行高" tabindex="-1">4.7 行高 <a class="header-anchor" href="#_4-7-行高" aria-label="Permalink to &quot;4.7 行高&quot;">​</a></h3><ul><li>属性名：<code>line-height</code></li><li>作用：控制一行文字的高度。</li><li>可选值： <ol><li><code>normal</code>：由浏览器根据文字大小决定的一个默认值。</li><li>像素（<code>px</code>）。</li><li>数字：参考自身 <code>font-size</code> 的倍数（很常用）。</li><li>百分比：参考自身 <code>font-size</code> 的百分比。</li></ol></li><li>备注：由于字体设计原因，文字在一行中，并不是绝对垂直居中，若一行中都是文字，不会太影响观感。</li></ul><hr><hr> - **举例：** <div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">150</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><ul><li><p><strong>行高注意事项：</strong></p><ol><li><p><code>line-height</code> 过小会怎样？—— 文字产生重叠，且最小值是 0，不能为负数。</p></li><li><p><code>line-height</code> 是可以继承的，且为了能更好的呈现文字，最好写数值。</p></li><li><p><code>line-height</code> 和 <code>height</code> 是什么关系？</p><ul><li>设置了 <code>height</code>，那么高度就是 <code>height</code> 的值。</li><li>不设置 <code>height</code> 的时候，会根据 <code>line-height</code> 计算高度。</li></ul></li></ol></li><li><p><strong>应用场景：</strong></p><ol><li><p>对于多行文字：控制行与行之间的距离。</p></li><li><p>对于单行文字：让 <code>height</code> 等于 <code>line-height</code>，可以实现文字垂直居中。</p><p>备注：由于字体设计原因，靠上述方法实现的居中，并不是绝对的垂直居中，但如果一行中都是文字，不会太影响观感。</p></li></ol></li></ul><h3 id="_4-8-文本对齐-垂直" tabindex="-1">4.8 文本对齐_垂直 <a class="header-anchor" href="#_4-8-文本对齐-垂直" aria-label="Permalink to &quot;4.8 文本对齐_垂直&quot;">​</a></h3><ol><li><p><strong>顶对齐：</strong> 无需任何属性，在垂直方向上，默认就是顶部对齐。</p></li><li><p><strong>居中：</strong> 对于单行文字，让 <code>height = line-height</code> 即可。</p><p>问题：多行文字垂直居中怎么做？—— 后面我们用定位去做。</p></li><li><p><strong>底部：</strong> 对于单行文字，目前一个临时的方式：</p><p>让 <code>line-height = (height ÷ 2) - font-size - x</code>。</p><p>备注：<code>x</code> 是根据字体族，动态决定的一个值。</p><p>问题：垂直方向上的底部对齐，更好的解决办法是什么？—— 后面我们用定位去做。</p></li></ol><h3 id="_4-9-vertical-align" tabindex="-1">4.9 vertical-align <a class="header-anchor" href="#_4-9-vertical-align" aria-label="Permalink to &quot;4.9 vertical-align&quot;">​</a></h3><ul><li><p><strong>属性名：</strong> <code>vertical-align</code>。</p></li><li><p><strong>作用：</strong> 用于指定<strong>同一行元素之间</strong>，或<strong>表格单元格</strong>内文字的<strong>垂直对齐方式</strong>。</p></li><li><p><strong>常用值：</strong></p><ol><li><code>baseline</code>（默认值）：使元素的基线与父元素的基线对齐。</li><li><code>top</code>：使元素的<strong>顶部</strong>与其<strong>所在行的顶部</strong>对齐。</li><li><code>middle</code>：使元素的<strong>中部</strong>与父元素的基线加上父元素<strong>字母 x 的一半</strong>对齐。</li><li><code>bottom</code>：使元素的<strong>底部</strong>与其<strong>所在行的底部</strong>对齐。</li></ol><p>特别注意：<code>vertical-align</code> 不能控制块元素。</p></li></ul><hr><hr><h2 id="_5-css列表属性" tabindex="-1">5. CSS列表属性 <a class="header-anchor" href="#_5-css列表属性" aria-label="Permalink to &quot;5. CSS列表属性&quot;">​</a></h2><p>列表相关的属性，可以作用在 <code>ul</code>、<code>ol</code>、<code>li</code> 元素上。</p><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>list-style-type</td><td>设置列表符号</td><td>常用值如下：<br><strong>none</strong>：不显示前面的标识（很常用！）<br><strong>square</strong>：实心方块<br><strong>disc</strong>：圆形<br><strong>decimal</strong>：数字<br><strong>lower-roman</strong>：小写罗马字<br><strong>upper-roman</strong>：大写罗马字<br><strong>lower-alpha</strong>：小写字母<br><strong>upper-alpha</strong>：大写字母</td></tr><tr><td>list-style-position</td><td>设置列表符号的位置</td><td><strong>inside</strong>：在 <code>li</code> 的里面<br><strong>outside</strong>：在 <code>li</code> 的外边</td></tr><tr><td>list-style-image</td><td>自定义列表符号</td><td><strong>url(图片地址)</strong></td></tr><tr><td>list-style</td><td>复合属性</td><td>没有数量、顺序的要求</td></tr></tbody></table><h2 id="_6-css表格属性" tabindex="-1">6. CSS表格属性 <a class="header-anchor" href="#_6-css表格属性" aria-label="Permalink to &quot;6. CSS表格属性&quot;">​</a></h2><ol><li>边框相关属性（其他元素也能用）：</li></ol><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>border-width</td><td>边框宽度</td><td>CSS 中可用的长度值</td></tr><tr><td>border-color</td><td>边框颜色</td><td>CSS 中可用的颜色值</td></tr><tr><td>border-style</td><td>边框风格</td><td><strong>none</strong> 默认值<br><strong>solid</strong> 实线<br><strong>dashed</strong> 虚线<br><strong>dotted</strong> 点线<br><strong>double</strong> 双实线</td></tr><tr><td>border</td><td>边框复合属性</td><td>没有数量、顺序的要求</td></tr></tbody></table><blockquote><p>注意：</p><ol><li>以上 <strong>4</strong> 个边框相关的属性，其他元素也可以用，这是我们第一次遇见它。</li><li>在后面的盒子模型中，我们会详细讲解边框相关的知识。</li></ol></blockquote><ol start="2"><li>表格独有属性（只有 <strong>table</strong> 标签才能使用）：</li></ol><hr><hr><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><strong>table-layout</strong></td><td>设置列宽度</td><td>auto：自动，列宽根据内容计算（默认值）。fixed：固定列宽，平均分。</td></tr><tr><td><strong>border-spacing</strong></td><td>单元格间距</td><td>CSS 中可用的长度值。生效的前提：单元格边框不能合并。</td></tr><tr><td><strong>border-collapse</strong></td><td>合并单元格边框</td><td>collapse：合并 separate：不合并</td></tr><tr><td><strong>empty-cells</strong></td><td>隐藏没有内容的单元格</td><td>show：显示，默认 hide：隐藏 生效前提：单元格不能合并。</td></tr><tr><td><strong>caption-side</strong></td><td>设置表格标题位置</td><td>top：上面（默认值） bottom：在表格下面</td></tr></tbody></table><p>以上 5 个属性，只有表格才能使用，即：<code>&lt;table&gt;</code> 标签。</p><h2 id="_7-css-背景属性" tabindex="-1">7. CSS 背景属性 <a class="header-anchor" href="#_7-css-背景属性" aria-label="Permalink to &quot;7. CSS 背景属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><strong>background-color</strong></td><td>设置背景颜色</td><td>符合 CSS 中颜色规范的值。默认背景颜色是 transparent。</td></tr><tr><td><strong>background-image</strong></td><td>设置背景图片</td><td>url(图片的地址)</td></tr><tr><td><strong>background-repeat</strong></td><td>设置背景重复方式</td><td>repeat：重复，铺满整个元素，默认值。repeat-x：只在水平方向重复。repeat-y：只在垂直方向重复。no-repeat：不重复。</td></tr><tr><td><strong>background-position</strong></td><td>设置背景图位置</td><td>通过关键字设置位置：写两个值，用空格隔开水平：left、center、right垂直：top、center、bottom如果只写一个值，另一方向的值取 center通过长度指定坐标位置：以元素左上角，为坐标原点，设置图片左上角的位置。两个值，分别是 x 坐标和 y 坐标。只写一个值，会被当做 x 坐标，y 坐标取 center</td></tr><tr><td><strong>background</strong></td><td>复合属性</td><td>没有数量和顺序要求</td></tr></tbody></table><hr><hr><h2 id="_8-css鼠标属性" tabindex="-1">8. CSS鼠标属性 <a class="header-anchor" href="#_8-css鼠标属性" aria-label="Permalink to &quot;8. CSS鼠标属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><code>cursor</code></td><td>设置鼠标光标的样式</td><td><code>pointer</code>：小手</td></tr><tr><td></td><td></td><td><code>move</code>：移动图标</td></tr><tr><td></td><td></td><td><code>text</code>：文字选择器</td></tr><tr><td></td><td></td><td><code>crosshair</code>：十字架</td></tr><tr><td></td><td></td><td><code>wait</code>：等待</td></tr><tr><td></td><td></td><td><code>help</code>：帮助</td></tr></tbody></table><p>扩展：自定义鼠标图标</p><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 自定义鼠标光标 */</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">cursor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: url(&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">./arrow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.png&quot;), pointer;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></div><h2 id="五、css盒子模型" tabindex="-1">五、CSS盒子模型 <a class="header-anchor" href="#五、css盒子模型" aria-label="Permalink to &quot;五、CSS盒子模型&quot;">​</a></h2><h3 id="_1-css-长度单位" tabindex="-1">1. CSS 长度单位 <a class="header-anchor" href="#_1-css-长度单位" aria-label="Permalink to &quot;1. CSS 长度单位&quot;">​</a></h3><ul><li><code>px</code>：像素。</li><li><code>em</code>：相对元素 <code>font-size</code> 的倍数。</li><li><code>rem</code>：相对根字体大小，html标签就是根。</li><li><code>%</code>：相对父元素计算。</li></ul><p>注意：CSS 中设置长度，必须加单位，否则样式无效！</p><h3 id="_2-元素的显示样式" tabindex="-1">2. 元素的显示样式 <a class="header-anchor" href="#_2-元素的显示样式" aria-label="Permalink to &quot;2. 元素的显示样式&quot;">​</a></h3><ul><li><p><strong>块元素（block）</strong></p><p>又称：块级元素</p><p>特点：</p><ol><li>在页面中<strong>独占一行</strong>，不会与任何元素共用一行，是从上到下排列的。</li><li>默认宽度：撑满<strong>父元素</strong>。</li><li>默认高度：由内容撑开。</li><li><strong>可以</strong>通过 CSS 设置宽高。</li></ol></li><li><p><strong>行内元素（inline）</strong></p><p>又称：内联元素</p><p>特点：</p><ol><li>在页面中<strong>不独占一行</strong>，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。</li><li>默认宽度：由<strong>内容</strong>撑开。</li></ol></li></ul><hr><hr> - 默认高度：由 **内容** 撑开。 - **无法** 通过 **CSS** 设置宽高。 <h3 id="行内块元素-inline-block" tabindex="-1">行内块元素（inline-block） <a class="header-anchor" href="#行内块元素-inline-block" aria-label="Permalink to &quot;行内块元素（inline-block）&quot;">​</a></h3><p>又称：内联块元素</p><p>特点：</p><ol><li>在页面中 <strong>不独占一行</strong>，一行中不能容纳下的行内元素，会在下一行继续从左到右排列。</li><li>默认宽度：由 <strong>内容</strong> 撑开。</li><li>默认高度：由 <strong>内容</strong> 撑开。</li><li><strong>可以</strong> 通过 <strong>CSS</strong> 设置宽高。</li></ol><p><strong>注意：</strong> 元素早期只分为：行内元素、块级元素，区分条件也只有一条：“是否独占一行”，如果按照这种分类方式，行内块元素应该算作行内元素。</p><h2 id="_3-总结各元素的显示模式" tabindex="-1">3. 总结各元素的显示模式 <a class="header-anchor" href="#_3-总结各元素的显示模式" aria-label="Permalink to &quot;3. 总结各元素的显示模式&quot;">​</a></h2><ul><li><strong>块元素（block）</strong></li></ul><ol><li>主体结构标签：<code>&lt;html&gt;</code>、<code>&lt;body&gt;</code></li><li>排版标签：<code>&lt;h1&gt;</code> <code>&lt;h6&gt;</code>、<code>&lt;hr&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;div&gt;</code></li><li>列表标签：<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dd&gt;</code></li><li>表格相关标签：<code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>、<code>&lt;thead&gt;</code>、<code>&lt;tfoot&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;caption&gt;</code></li><li><code>&lt;form&gt;</code> 与 <code>&lt;option&gt;</code></li></ol><ul><li><strong>行内元素（inline）</strong></li></ul><ol><li>文本标签：<code>&lt;br&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code>、<code>&lt;sup&gt;</code>、<code>&lt;sub&gt;</code>、<code>&lt;del&gt;</code>、<code>&lt;ins&gt;</code></li><li><code>&lt;a&gt;</code> 与 <code>&lt;label&gt;</code></li></ol><ul><li><strong>行内块元素（inline-block）</strong></li></ul><ol><li>图片：<code>&lt;img&gt;</code></li><li>单元格：<code>&lt;td&gt;</code>、<code>&lt;th&gt;</code></li><li>表单控件：<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;button&gt;</code></li><li>框架标签：<code>&lt;iframe&gt;</code></li></ol><h2 id="_4-修改元素的显示模式" tabindex="-1">4. 修改元素的显示模式 <a class="header-anchor" href="#_4-修改元素的显示模式" aria-label="Permalink to &quot;4. 修改元素的显示模式&quot;">​</a></h2><p>通过 <strong>CSS</strong> 中的 <strong>display</strong> 属性可以修改元素的默认显示模式，常用值如下：</p><hr><hr><table tabindex="0"><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素会被隐藏。</td></tr><tr><td>block</td><td>元素将作为块级元素显示。</td></tr><tr><td>inline</td><td>元素将作为内联元素显示。</td></tr><tr><td>inline-block</td><td>元素将作为行内块元素显示。</td></tr></tbody></table><h2 id="_5-盒子模型的组成" tabindex="-1">5. 盒子模型的组成 <a class="header-anchor" href="#_5-盒子模型的组成" aria-label="Permalink to &quot;5. 盒子模型的组成&quot;">​</a></h2><p>CSS 会把所有的 HTML 元素都看成一个盒子，所有的样式也都是基于这个盒子。</p><ol><li><strong>margin（外边距）</strong>：盒子与外界的距离。</li><li><strong>border（边框）</strong>：盒子的边框。</li><li><strong>padding（内边距）</strong>：紧贴内容的补白区域。</li><li><strong>content（内容）</strong>：元素中的文本或后代元素都是它的内容。</li></ol><p>图示如下：</p><p><img src="" alt="盒子模型" loading="lazy"></p><p>盒子的大小 = <strong>content</strong> + 左右 <strong>padding</strong> + 左右 <strong>border</strong>。</p><p>注意：外边距 <strong>margin</strong> 不会影响盒子的大小，但会影响盒子的位置。</p><h2 id="_6-盒子内容区-content" tabindex="-1">6. 盒子内容区（content） <a class="header-anchor" href="#_6-盒子内容区-content" aria-label="Permalink to &quot;6. 盒子内容区（content）&quot;">​</a></h2><h2 id="css-属性名" tabindex="-1">CSS 属性名 <a class="header-anchor" href="#css-属性名" aria-label="Permalink to &quot;CSS 属性名&quot;">​</a></h2><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>width</td><td>设置内容区域宽度</td><td>长度</td></tr><tr><td>max-width</td><td>设置内容区域的最大宽度</td><td>长度</td></tr><tr><td>min-width</td><td>设置内容区域的最小宽度</td><td>长度</td></tr><tr><td>height</td><td>设置内容区域的高度</td><td>长度</td></tr><tr><td>max-height</td><td>设置内容区域的最大高度</td><td>长度</td></tr><tr><td>min-height</td><td>设置内容区域的最小高度</td><td>长度</td></tr></tbody></table><p>注意：</p><ul><li><code>max-width</code>、<code>min-width</code> 一般不与 <code>width</code> 一起使用。</li><li><code>max-height</code>、<code>min-height</code> 一般不与 <code>height</code> 一起使用。</li></ul><h3 id="_7-关于默认宽度" tabindex="-1">7. 关于默认宽度 <a class="header-anchor" href="#_7-关于默认宽度" aria-label="Permalink to &quot;7. 关于默认宽度&quot;">​</a></h3><p>所谓的默认宽度，就是 <strong>不设置 width 属性时</strong>，元素所呈现出来的宽度。</p><p><strong>总宽度</strong> = 父的 <code>content</code> — 自身的左右 <code>margin</code>。</p><p><strong>内容区的宽度</strong> = 父的 <code>content</code> — 自身的左右 <code>margin</code> — 自身的左右 <code>border</code> — 自身的左右 <code>padding</code>。</p><h3 id="_8-盒子的边距-padding" tabindex="-1">8. 盒子的边距（padding） <a class="header-anchor" href="#_8-盒子的边距-padding" aria-label="Permalink to &quot;8. 盒子的边距（padding）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>padding-top</td><td>上内边距</td><td>长度</td></tr><tr><td>padding-right</td><td>右内边距</td><td>长度</td></tr><tr><td>padding-bottom</td><td>下内边距</td><td>长度</td></tr><tr><td>padding-left</td><td>左内边距</td><td>长度</td></tr><tr><td>padding</td><td>复合属性</td><td>长度，可以设置 1~4 个值</td></tr></tbody></table><p><code>padding</code> 复合属性的使用规则：</p><ol><li><code>padding: 10px;</code> 四个方向内边距都是 <strong>10px</strong>。</li><li><code>padding: 10px 20px;</code> 上 <strong>10px</strong>，左右 <strong>20px</strong>。（上下、左右）</li><li><code>padding: 10px 20px 30px;</code> 上 <strong>10px</strong>，左右 <strong>20px</strong>，下 <strong>30px</strong>。（上、左右、下）</li><li><code>padding: 10px 20px 30px 40px;</code> 上 <strong>10px</strong>，右 <strong>20px</strong>，下 <strong>30px</strong>，左 <strong>40px</strong>。（上、右、下、左）</li></ol><p>注意点：</p><ol><li><code>padding</code> 的值不能为负数。</li><li><strong>行内元素</strong> 的左右内边距是没问题的，上下内边距不能完美的设置。</li><li><strong>块级元素</strong>、<strong>行内块元素</strong>，四个方向 <strong>内边距</strong> 都可以完美设置。</li></ol><hr><hr><h3 id="_9-盒子边框-border" tabindex="-1">9. 盒子边框（border） <a class="header-anchor" href="#_9-盒子边框-border" aria-label="Permalink to &quot;9. 盒子边框（border）&quot;">​</a></h3><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td><strong>border-style</strong></td><td>边框线风格</td><td><strong>none</strong>：默认值</td></tr><tr><td></td><td>复合了四个方向的边框风格</td><td><strong>solid</strong>：实线</td></tr><tr><td></td><td></td><td><strong>dashed</strong>：虚线</td></tr><tr><td></td><td></td><td><strong>dotted</strong>：点线</td></tr><tr><td></td><td></td><td><strong>double</strong>：双实线</td></tr><tr><td></td><td></td><td>……</td></tr><tr><td><strong>border-width</strong></td><td>边框线宽度</td><td>长度，默认 <strong>3px</strong></td></tr><tr><td></td><td>复合了四个方向的边框宽度</td><td></td></tr><tr><td><strong>border-color</strong></td><td>边框线颜色</td><td>颜色，默认黑色</td></tr><tr><td></td><td>复合了四个方向的边框颜色</td><td></td></tr><tr><td><strong>border</strong></td><td>复合属性</td><td>值没有顺序和数量要求。</td></tr><tr><td><strong>border-left</strong></td><td></td><td></td></tr><tr><td><strong>border-left-style</strong></td><td></td><td></td></tr><tr><td><strong>border-left-width</strong></td><td></td><td></td></tr><tr><td><strong>border-left-color</strong></td><td></td><td></td></tr><tr><td><strong>border-right</strong></td><td></td><td></td></tr><tr><td><strong>border-right-style</strong></td><td></td><td></td></tr><tr><td><strong>border-right-width</strong></td><td></td><td></td></tr><tr><td><strong>border-right-color</strong></td><td></td><td></td></tr><tr><td><strong>border-top</strong></td><td></td><td></td></tr><tr><td><strong>border-top-style</strong></td><td></td><td></td></tr><tr><td><strong>border-top-width</strong></td><td></td><td></td></tr><tr><td><strong>border-top-color</strong></td><td></td><td></td></tr><tr><td><strong>border-bottom</strong></td><td></td><td></td></tr><tr><td><strong>border-bottom-style</strong></td><td></td><td></td></tr><tr><td><strong>border-bottom-width</strong></td><td></td><td></td></tr><tr><td><strong>border-bottom-color</strong></td><td></td><td></td></tr></tbody></table><p>边框相关属性共 <strong>20</strong> 个。</p><p><strong>border-style</strong>、<strong>border-width</strong>、<strong>border-color</strong> 其实也是复合属性。</p><h3 id="_10-盒子外边距-margin" tabindex="-1">10. 盒子外边距_margin <a class="header-anchor" href="#_10-盒子外边距-margin" aria-label="Permalink to &quot;10. 盒子外边距_margin&quot;">​</a></h3><hr><hr><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>margin-left</td><td>左外边距</td><td>CSS 中的长度值</td></tr><tr><td>margin-right</td><td>右外边距</td><td>CSS 中的长度值</td></tr><tr><td>margin-top</td><td>上外边距</td><td>CSS 中的长度值</td></tr><tr><td>margin-bottom</td><td>下外边距</td><td>CSS 中的长度值</td></tr><tr><td>margin</td><td>复合属性</td><td>CSS 中的长度值</td></tr></tbody></table><h2 id="_10-1-margin-注意事项" tabindex="-1">10.1 margin 注意事项 <a class="header-anchor" href="#_10-1-margin-注意事项" aria-label="Permalink to &quot;10.1 margin 注意事项&quot;">​</a></h2><ol><li>子元素的 margin，是参考父元素的 content 计算的。（因为是父亲的 content 中承装着子元素）</li><li>上 margin、左 margin：影响自己的位置；下 margin、右 margin：影响后面兄弟元素的位置。</li><li>块级元素、行内块元素，均可以完美地设置四个方向的 margin；但行内元素，左右 margin 可以完美设置，上下 margin 设置无效。</li><li>margin 的值也可以是 auto，如果给一个块级元素设置左右 margin 都为 auto，该块级元素会在父元素中水平居中。</li><li>margin 的值可以是负值。</li></ol><h2 id="_10-2-margin-塌陷问题" tabindex="-1">10.2 margin 塌陷问题 <a class="header-anchor" href="#_10-2-margin-塌陷问题" aria-label="Permalink to &quot;10.2 margin 塌陷问题&quot;">​</a></h2><p>什么是 margin 塌陷？</p><p>第一个子元素的上 margin 会作用在父元素上，最后一个子元素的下 margin 会作用在父元素上。</p><p>如何解决 margin 塌陷？</p><ul><li>方案一：给父元素设置不为 0 的 padding。</li><li>方案二：给父元素设置宽度不为 0 的 border。</li><li>方案三：给父元素设置 css 样式 overflow:hidden</li></ul><h2 id="_10-3-margin-合并问题" tabindex="-1">10.3 margin 合并问题 <a class="header-anchor" href="#_10-3-margin-合并问题" aria-label="Permalink to &quot;10.3 margin 合并问题&quot;">​</a></h2><p>什么是 margin 合并？</p><p>上面兄弟元素的下外边距和下面兄弟元素的上外边距会合并，取一个最大的值，而不是相加。</p><p>如何解决 margin 塌陷？</p><p>布局解决，布局的时候上下的兄弟元素，只给一个设置上下外边距就可以了。</p><hr><hr><h2 id="_11-处理内容溢出" tabindex="-1">11. 处理内容溢出 <a class="header-anchor" href="#_11-处理内容溢出" aria-label="Permalink to &quot;11. 处理内容溢出&quot;">​</a></h2><table tabindex="0"><thead><tr><th>CSS 属性名</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>overflow</td><td>溢出内容的处理方式</td><td>visible：显示，默认值 hidden：隐藏 scroll：显示滚动条，不论内容是否溢出 auto：自动显示滚动条，内容不溢出不显示</td></tr><tr><td>overflow-x</td><td>水平方向溢出内容的处理方式</td><td>同 overflow</td></tr><tr><td>overflow-y</td><td>垂直方向溢出内容给的处理方式</td><td>同 overflow</td></tr></tbody></table><p><strong>注意：</strong></p><ol><li>overflow-x、overflow-y 不能一个是 hidden，一个是 visible，是实验性属性，不建议使用。</li><li>overflow 常用的值是 hidden 和 auto，除了能处理溢出的显示方式，还可以解决很多疑难杂症。</li></ol><h2 id="_12-隐藏元素的方式" tabindex="-1">12. 隐藏元素的方式 <a class="header-anchor" href="#_12-隐藏元素的方式" aria-label="Permalink to &quot;12. 隐藏元素的方式&quot;">​</a></h2><p><strong>方式一：visibility 属性</strong></p><p>visibility 属性默认值是 show，如果设置为 hidden，元素会隐藏。</p><p>元素看不见了，还占有原来的位置（元素的大小依然保持）。</p><p><strong>方式二：display 属性</strong></p><p>设置 display:none，就可以让元素隐藏。</p><p>彻底地隐藏，不但看不见，也占用任何位置，没有大小宽高。</p><h2 id="_13-样式的继承" tabindex="-1">13. 样式的继承 <a class="header-anchor" href="#_13-样式的继承" aria-label="Permalink to &quot;13. 样式的继承&quot;">​</a></h2><p>样式指样式继承，元素如果本身没有设置某个样式，就使用本身设置的样式；但如果本身没有设置某个样式，会从父元素开始一级一级继承（优先继承离得近的祖先元素）。</p><p><strong>会继承的 css 属性</strong></p><p>字体属性、文本属性（除「vertical-align」）、文字颜色 等。</p><p><strong>不会继承的 css 属性</strong></p><p>边框、背景、内边距、外边距、宽、高、溢出方式 等。</p><blockquote><p>一个准则：能继承的属性，都是不影响布局的，简单说：都是和盒子模型没关系的。</p></blockquote><hr><hr><h3 id="_14-默认样式" tabindex="-1">14. 默认样式 <a class="header-anchor" href="#_14-默认样式" aria-label="Permalink to &quot;14. 默认样式&quot;">​</a></h3><p>元素一般都有些默认的样式，例如：</p><ol><li><code>&lt;a&gt;</code> 元素：下划线、字体颜色、鼠标小手。</li><li><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code> 元素：文字加粗、文字大小、上下外边距。</li><li><code>&lt;p&gt;</code> 元素：上下外边距</li><li><code>&lt;ul&gt;、ol</code> 元素：左内边距</li><li><code>body</code> 元素：8px 外边距（4 个方向）</li></ol><p>……</p><p><strong>优先级：</strong> 元素的默认样式 &gt; 继承的样式，所以如果要重置元素的默认样式，选择器一定要直接选择器到该元素。</p><h3 id="_15-布局小技巧" tabindex="-1">15. 布局小技巧 <a class="header-anchor" href="#_15-布局小技巧" aria-label="Permalink to &quot;15. 布局小技巧&quot;">​</a></h3><ol><li><p>行内元素、行内块元素，可以被父元素当做文本处理。</p><p>即：可以像处理文本对齐一样，去处理：行内、行内块在父元素中的对齐。</p><p>例如：<code>text-align</code>、<code>line-height</code>、<code>text-indent</code> 等。</p></li><li><p>如何让子元素，在父元素中 <strong>水平居中</strong>：</p><ul><li>若子元素为 <strong>块元素</strong>，给父元素加上：<code>margin:0 auto;</code></li><li>若子元素为 <strong>行内元素、行内块元素</strong>，给父元素加上：<code>text-align:center</code>。</li></ul></li><li><p>如何让子元素，在父元素中 <strong>垂直居中</strong>：</p><ul><li><p>若子元素为 <strong>块元素</strong>，给子元素加上：<code>margin-top</code>，值为：(父元素 - 子元素盒子总高) / 2。</p></li><li><p>若子元素为 <strong>行内元素、行内块元素</strong>：</p><p>让父元素的 <code>height = line-height</code>，每个子元素都加上：<code>vertical-align:middle;</code></p><p>补充：若想绝对垂直居中，父元素 <code>font-size</code> 设置为 0。</p></li></ul></li></ol><h3 id="_16-元素之间的空白问题" tabindex="-1">16. 元素之间的空白问题 <a class="header-anchor" href="#_16-元素之间的空白问题" aria-label="Permalink to &quot;16. 元素之间的空白问题&quot;">​</a></h3><p><strong>产生的原因：</strong></p><p>行内元素、行内块元素，彼此之间的换行会被浏览器解析为一个空白字符。</p><p><strong>解决方案：</strong></p><ol><li><strong>方案一：</strong> 去掉换行和空格（不推荐）。</li><li><strong>方案二：</strong> 给父元素设置 <code>font-size:0</code>，再给需要显示文字的元素，单独设置字体大小（推荐）。</li></ol><h3 id="_17-行内块的幽灵空白问题" tabindex="-1">17. 行内块的幽灵空白问题 <a class="header-anchor" href="#_17-行内块的幽灵空白问题" aria-label="Permalink to &quot;17. 行内块的幽灵空白问题&quot;">​</a></h3><p><strong>产生原因：</strong></p><p>行内块元素与文本的基线对齐，而文本的基线与文本最底端之间是有一定距离的。</p><hr><hr> 2. 给行内块设置 `vertical`，值不为 `baseline` 即可，设置为 `middel`、`bottom`、`top` 均可。 <ol start="3"><li><p>方案三：若父元素内有一张图片，设置图片为 <code>display:block</code>。</p></li><li><p>方案四：给父元素设置 <code>font-size: 0</code>。如果该行内块内部还有文本，则需单独设置 <code>font-size</code>。</p></li></ol><h2 id="六、浮动" tabindex="-1">六、浮动 <a class="header-anchor" href="#六、浮动" aria-label="Permalink to &quot;六、浮动&quot;">​</a></h2><h3 id="_1-浮动的简介" tabindex="-1">1. 浮动的简介 <a class="header-anchor" href="#_1-浮动的简介" aria-label="Permalink to &quot;1. 浮动的简介&quot;">​</a></h3><p>在最初，浮动是用来实现文字环绕图片效果的，现在浮动是主流的页面布局方式之一。</p><p><img src="" alt="Image" loading="lazy"></p><p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Fuga, esse eveniet. Soluta quos beatae aperiam velit voluptatibus at veniam minima mollitia nostrum maxime eveniet eos, totam facilis animi laudantium eius placeat earum aspernatur rerum voluptatum, sunt repellat? Quidem recusandae iusto velit incidunt veritatis vero illum tempore dignissimos voluptatibus eius cumque, optio nulla assumenda! Magnam quisquam laborum doloribus eveniet minima eum sit! Repellat, quibusdam. Illum, consequuntur blanditiis fugiat quasi reiciendis unde voluptate rem sequi explicabo, temporibus facilis quod tenetur voluptates aliquid aperiam, ducimus sint. Similique mollitia illum aliquid eos vero suscipit necessitatibus dolore maxime?</p><h3 id="_2-元素浮动后的特点" tabindex="-1">2. 元素浮动后的特点 <a class="header-anchor" href="#_2-元素浮动后的特点" aria-label="Permalink to &quot;2. 元素浮动后的特点&quot;">​</a></h3><ol><li>脱离文档流。</li><li>不管浮动前是什么元素，浮动后：默认宽与高都是被内容撑开（尽可能小），而且可以设置宽高。</li><li>不会独占一行，可以与其他元素共用一行。</li><li>不会 <code>margin</code> 合并，也不会 <code>margin</code> 塌陷，能够完美的设置四个方向的 <code>margin</code> 和 <code>padding</code>。</li><li>不会像行内块一样轻松做文本处理（没有行内块的空白问题）。</li></ol><h3 id="_3-浮动小练习" tabindex="-1">3. 浮动小练习 <a class="header-anchor" href="#_3-浮动小练习" aria-label="Permalink to &quot;3. 浮动小练习&quot;">​</a></h3><p>练习1：盒子右浮动，效果如下</p><hr><hr> 练习2：盒子1左浮动，效果如下 <p>练习3：所有盒子都浮动，效果如下</p><p>练习4：所有盒子浮动后，盒子3落下来，效果如下</p><p>练习5：所有盒子浮动后，盒子3卡住了，效果如下</p><hr><hr><h2 id="_4-解决浮动产生的影响" tabindex="-1">4. 解决浮动产生的影响 <a class="header-anchor" href="#_4-解决浮动产生的影响" aria-label="Permalink to &quot;4. 解决浮动产生的影响&quot;">​</a></h2><h3 id="_4-1-元素浮动后会有哪些影响" tabindex="-1">4.1 元素浮动后会有哪些影响 <a class="header-anchor" href="#_4-1-元素浮动后会有哪些影响" aria-label="Permalink to &quot;4.1 元素浮动后会有哪些影响&quot;">​</a></h3><p><strong>对兄弟元素的影响</strong>：后面的兄弟元素，会占据浮动元素之前的位置，在浮动元素的下面；对前面的兄弟无影响。</p><p><strong>对父元素的影响</strong>：不能撑起父元素的高度，导致父元素高度塌陷，但父元素的宽度依然束缚浮动的元素。</p><h3 id="_4-2-解决浮动产生的影响-清除浮动" tabindex="-1">4.2 解决浮动产生的影响（清除浮动） <a class="header-anchor" href="#_4-2-解决浮动产生的影响-清除浮动" aria-label="Permalink to &quot;4.2 解决浮动产生的影响（清除浮动）&quot;">​</a></h3><p><strong>解决方案：</strong></p><ol><li><strong>方案一</strong>：给父元素指定高度。</li><li><strong>方案二</strong>：给父元素也设置浮动，带来其他影响。</li><li><strong>方案三</strong>：给父元素设置 <code>overflow:hidden</code>。</li><li><strong>方案四</strong>：在所有浮动元素的最后面，添加一个块级元素，并给该块级元素设置 <code>clear:both</code>。</li><li><strong>方案五</strong>：给浮动元素的父元素，设置伪元素，通过伪元素清除浮动，原理与方案四相同。===&gt; 推荐使用</li></ol><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.parent::after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">both</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><p>布局中的一个原则：设置浮动的时候，兄弟元素要么全部浮动，要么全都不浮动。</p><h2 id="_5-浮动布局小练习" tabindex="-1">5. 浮动布局小练习 <a class="header-anchor" href="#_5-浮动布局小练习" aria-label="Permalink to &quot;5. 浮动布局小练习&quot;">​</a></h2><p>整体效果如下：</p><p><img src="" alt="布局效果图" loading="lazy"></p><p>具体标注如下：</p><hr><hr><h2 id="_6-浮动相关属性" tabindex="-1">6.浮动相关属性 <a class="header-anchor" href="#_6-浮动相关属性" aria-label="Permalink to &quot;6.浮动相关属性&quot;">​</a></h2><table tabindex="0"><thead><tr><th>CSS 属性</th><th>功能</th><th>属性值</th></tr></thead><tbody><tr><td>float</td><td>设置浮动</td><td>left：设置左浮动</td></tr><tr><td></td><td></td><td>right：设置右浮动</td></tr><tr><td></td><td></td><td>none：不浮动，默认值</td></tr><tr><td>clear</td><td>清除浮动</td><td>left：清除前面左浮动的影响</td></tr><tr><td></td><td>清除前面兄弟元素</td><td>right：清除前面右浮动的影响</td></tr><tr><td></td><td>浮动元素的响应</td><td>both：清除前面左右浮动的影响</td></tr></tbody></table><h2 id="七、定位" tabindex="-1">七、定位 <a class="header-anchor" href="#七、定位" aria-label="Permalink to &quot;七、定位&quot;">​</a></h2><h3 id="_1-相对定位" tabindex="-1">1. 相对定位 <a class="header-anchor" href="#_1-相对定位" aria-label="Permalink to &quot;1. 相对定位&quot;">​</a></h3><h4 id="_1-1-如何设置相对定位" tabindex="-1">1.1 如何设置相对定位？ <a class="header-anchor" href="#_1-1-如何设置相对定位" aria-label="Permalink to &quot;1.1 如何设置相对定位？&quot;">​</a></h4><ul><li>给元素设置 <code>position:relative</code> 即可实现相对定位。</li><li>可以使用 <code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code> 四个属性调整位置。</li></ul><h4 id="_1-2-相对定位的参考点在哪里" tabindex="-1">1.2 相对定位的参考点在哪里？ <a class="header-anchor" href="#_1-2-相对定位的参考点在哪里" aria-label="Permalink to &quot;1.2 相对定位的参考点在哪里？&quot;">​</a></h4><ul><li>相对自己原来的位置</li></ul><h4 id="_1-3-相对定位的特点" tabindex="-1">1.3 相对定位的特点： <a class="header-anchor" href="#_1-3-相对定位的特点" aria-label="Permalink to &quot;1.3 相对定位的特点：&quot;">​</a></h4><ol><li>不会脱离文档流，元素位置的变化，只是视觉效果上的变化，不会对其他元素产生任何影响。</li><li>定位元素的显示层级比普通元素高，无论什么定位，显示层级都是一样的。 默认规则是： <ul><li>定位的元素会在普通元素之上。</li></ul></li></ol><hr><hr> 3. 都发生定位的两个元素，后写的元素会盖在先写的元素之上。 <ol start="4"><li><p>left 不能和 right 一起设置，top 和 bottom 不能一起设置。</p></li><li><p>相对定位的元素，也能继续浮动，但不推荐这样做。</p></li><li><p>相对行内的元素，也能通过 margin 调整位置，但不推荐这样做。</p></li></ol><p>注意：绝大多数情况下，相对定位，会与绝对定位配合使用。</p><ol start="2"><li>绝对定位</li></ol><p>2.1 如何设置绝对定位？</p><ul><li>给元素设置 position: absolute 即可实现绝对定位。</li><li>可以使用 left、right、top、bottom 四个属性调整位置。</li></ul><p>2.2 绝对定位的参考点在哪里？</p><ul><li>参考它的 <strong>包含块</strong>。</li></ul><p>什么是包含块？</p><ol><li>对于没有脱离文档流的元素：包含块就是父元素；</li><li>对于脱离文档流的元素：包含块是第一个拥有定位属性的祖先元素（如果所有祖先都没定位，那包含块就是整个页面）。</li></ol><p>2.3 绝对定位元素的特点：</p><ol><li>脱离文档流，会对后面的兄弟元素、父元素有影响。</li><li>left 不能和 right 一起设置，top 和 bottom 不能一起设置。</li><li>绝对定位，浮动不能同时设置，如果同时设置，浮动失效，以定位为主。</li><li>绝对定位的元素，也能通过 margin 调整位置，但不推荐这样做。</li><li>无论是什么元素（行内、行内块、块级）设置为绝对定位之后，都变成了定位元素。</li></ol><p>何为定位元素？—— 默认宽、高都被内容所撑开，且能自由设置宽高。</p><ol start="3"><li>固定定位</li></ol><p>3.1 如何设置为固定定位？</p><ul><li>给元素设置 position: fixed 即可实现固定定位。</li><li>可以使用 left、right、top、bottom 四个属性调整位置。</li></ul><p>3.2 固定定位的参考点在哪里？</p><ul><li>参考它的 <strong>视口</strong></li></ul><p>什么是视口？—— 对于 PC 浏览器来说，视口就是我们看网页的那扇“窗户”。</p><p>3.3 固定定位元素的特点</p><ol><li>脱离文档流，会对后面的兄弟元素、父元素有影响。</li><li>left 不能和 right 一起设置，top 和 bottom 不能一起设置。</li><li>固定定位和浮动不能同时设置，如果同时设置，浮动失效，以固定定位为主。</li></ol><hr><hr> 4. 粘性定位 <p>4.1 如何设置为粘性定位？</p><ul><li>给元素设置 <code>position:sticky</code> 即可实现粘性定位。</li><li>可以使用 <code>left</code>、<code>right</code>、<code>top</code>、<code>bottom</code> 四个属性调整位置，不过最常用的是 <code>top</code> 值。</li></ul><p>4.2 粘性定位的参考点在哪里？</p><ul><li>离它最近的一个拥有“滚动机制”的祖先元素，即便这个祖先不是最近的真实可滚动祖先。</li></ul><p>4.3 粘性定位元素的特点</p><ul><li>不会脱离文档流，它是一种专门用于窗口滚动时的新的定位方式。</li><li>最常用的值是 <code>top</code> 值。</li><li>粘性定位和浮动可以同时设置，但不推荐这样做。</li><li>粘性定位的元素，也能通过 <code>margin</code> 调整位置，但不推荐这样做。</li></ul><p>粘性定位和相对定位的特点基本一致，不同的是：粘性定位可以在元素到达某个位置时将其固定。</p><ol start="5"><li><p>定位层级</p></li><li><p>定位元素的显示层级变化时普通元素高，无论什么定位，显示层级都是一样的。</p></li><li><p>如果设置为普通重叠，默认情况是：后面的元素，会显示在前面元素之上。</p></li><li><p>可以通过 css 属性 <code>z-index</code> 调整元素的显示层级。</p></li><li><p><code>z-index</code> 的属性值是数字，没有单位，值越大显示层级越高。</p></li><li><p>只有定位的元素设置 <code>z-index</code> 才有效。</p></li><li><p>如果 <code>z-index</code> 值大的元素，依然没有覆盖掉 <code>z-index</code> 值小的元素，那么请检查其他包含块的层级。</p></li><li><p>定位的特殊应用</p></li></ol><p>注意：</p><ol><li>发生固定定位、绝对定位后，元素都变成了定位元素，默认宽高被内容撑开，且依然可以设置宽高。</li><li>发生相对定位后，元素依然是之前的显示模式。</li><li>以下所说的特殊应用，只针对 <strong>绝对定位</strong> 和 <strong>固定定位</strong> 的元素，不包括相对定位的元素。</li></ol><p>让定位元素的宽充满包含块</p><ol><li>块想想与包含块一致，可以给定位元素同时设置 <code>left</code> 和 <code>right</code> 为 <code>0</code>。</li><li>高度想与包含块一致，<code>top</code> 和 <code>bottom</code> 设置为 <code>0</code>。</li></ol><p>让定位元素在包含块中居中</p><ul><li>方案一：</li></ul><hr><hr> ```css [exapmle.css] left: 0; right: 0; top: 0; bottom: 0; margin: auto; ``` <ul><li>方案二：</li></ul><div class="vp-code-block-title"><div class="vp-code-block-title-bar"><span class="vp-code-block-title-text" data-title="exapmle.css">exapmle.css</span></div><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">left: 50%;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top: 50%;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">margin-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 负的宽度一半;</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">margin-top</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 负的高度一半;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><p>注意：该定位的元素必须设置宽高！！！</p><h2 id="八、布局" tabindex="-1">八、布局 <a class="header-anchor" href="#八、布局" aria-label="Permalink to &quot;八、布局&quot;">​</a></h2><h3 id="_1-版心" tabindex="-1">1. 版心 <a class="header-anchor" href="#_1-版心" aria-label="Permalink to &quot;1. 版心&quot;">​</a></h3><ul><li>在 PC 端网页中，一般都会有一个固定宽度且水平居中的盒子，来显示网页的主要内容，这是网页的 <strong>版心</strong>。</li><li>版心的宽度一般是 <strong>960 ~ 1200</strong> 像素之间。</li><li>版心可以是一个，也可以是多个。</li></ul><h3 id="_2-常用布局名词" tabindex="-1">2. 常用布局名词 <a class="header-anchor" href="#_2-常用布局名词" aria-label="Permalink to &quot;2. 常用布局名词&quot;">​</a></h3><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;hr&gt;&lt;hr&gt;</span></span>\n<span class="line"><span>| **位置**   |                                                                 |</span></span>\n<span class="line"><span>| ---------- | --------------------------------------------------------------- |</span></span>\n<span class="line"><span>| 顶部导航条 | `topbar`                                                        |</span></span>\n<span class="line"><span>| 页头       | `header`、`page-header`                                         |</span></span>\n<span class="line"><span>| 导航       | `nav`、`navigator`、`navbar`                                    |</span></span>\n<span class="line"><span>| 搜索框     | `search`、`search-box`                                          |</span></span>\n<span class="line"><span>| 横幅、广告 | `banner`                                                        |</span></span>\n<span class="line"><span>| 主内容     | `content`、`main`                                               |</span></span>\n<span class="line"><span>| 侧边栏     | `aside`、`sidebar`                                              |</span></span>\n<span class="line"><span>| 页脚       | `footer`、`page-footer`                                         |</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>## 3. 重置默认样式</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>很多元素都有默认样式，比如：</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>- `p` 元素有默认的上下 `margin`。</span></span>\n<span class="line"><span>- `h1~h6` 标题也有上下 `margin`，且字体现加粗。</span></span>\n<span class="line"><span>- `body` 元素有默认的 `8px` 外边距。</span></span>\n<span class="line"><span>- 超链接有默认的文字颜色和下划线。</span></span>\n<span class="line"><span>- `ul` 元素有默认的左 `padding`。</span></span>\n<span class="line"><span>- ……</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>在早期，元素默认样式，能够让我们快速的绘制网页，但如今网页的设计越来越复杂，内容越来越多，而且很棘手，这些默认样式会给我们绘制页面带来麻烦；而且这些默认样式，在不同的浏览器上呈现出来的效果也不一样，所以我们需要重置这些默认样式。</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>### 方案一：使用全局选择器</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>```css [exapmle.css]</span></span>\n<span class="line"><span>* {</span></span>\n<span class="line"><span>  margin: 0;</span></span>\n<span class="line"><span>  padding: 0;</span></span>\n<span class="line"><span>  ......</span></span>\n<span class="line"><span>}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>此种方法，在简单案例中可以用一下，但实际开发中不会使用，因为 <code>*</code> 选择的是所有元素，而并不是所有的元素都有默认样式；而且我们重置时，有时候是需要做特定处理的，比如：想让 <code>a</code> 元素的文字是灰色，其他元素文字是蓝色。</p><h3 id="方案二-reset-css" tabindex="-1">方案二：reset.css <a class="header-anchor" href="#方案二-reset-css" aria-label="Permalink to &quot;方案二：reset.css&quot;">​</a></h3><p>选择到具有默认样式的元素，清空其默认的样式。</p><p>经过 <code>reset</code> 后的网页，好似“一张白纸”，开发人员可根据设计稿，精细的去添加具体的样式。</p><hr><hr><h3 id="方案三-normalize-css" tabindex="-1">方案三：Normalize.css <a class="header-anchor" href="#方案三-normalize-css" aria-label="Permalink to &quot;方案三：Normalize.css&quot;">​</a></h3><p><strong>Normalize.css</strong> 是一种最新方案，它在清除默认样式的基础上，保留了一些有价值的默认样式。</p><ul><li>官网地址：<a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noreferrer">http://necolas.github.io/normalize.css/</a></li></ul><p>相对于 <strong>reset.css</strong>，<strong>Normalize.css</strong> 有如下优点：</p><ol><li>保持了有价值的默认样式，而不是完全去掉它们。</li><li>为大部分 HTML 元素提供一般化的样式。</li><li>新增对 <strong>HTML5</strong> 元素的设置。</li><li>对并集选择器的使用比较谨慎，有效避免调试工具杂乱。</li></ol><p>**备注：**Normalize.css 的重置，和 <strong>reset.css</strong> 相比，更加的温和，开发时可根据实际情况进行选择。</p>',308)),t(e),t(n)])}const C=d(b,[["render",k]]);export{f as __pageData,C as default};
